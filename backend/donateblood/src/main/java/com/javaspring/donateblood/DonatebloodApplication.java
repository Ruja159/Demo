package com.javaspring.donateblood;

import com.javaspring.donateblood.model.BloodType;
import com.javaspring.donateblood.model.User;
import com.javaspring.donateblood.repository.UserRepository;
import com.javaspring.donateblood.service.BloodTypeService;
import com.javaspring.donateblood.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.context.event.EventListener;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.*;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spi.service.contexts.SecurityContext;
import springfox.documentation.spring.web.plugins.Docket;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SpringBootApplication
@EnableJpaRepositories(basePackageClasses = UserRepository.class)
public class DonatebloodApplication {

	private ApiKey apiKey() {
		return new ApiKey("JWT", "Authorization", "header");
	}


	private SecurityContext securityContext() {
		return SecurityContext.builder().securityReferences(defaultAuth()).build();
	}

	private List<SecurityReference> defaultAuth() {
		AuthorizationScope authorizationScope = new AuthorizationScope("global", "accessEverything");
		AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];
		authorizationScopes[0] = authorizationScope;
		return Arrays.asList(new SecurityReference("JWT", authorizationScopes));
	}

	@Bean
	public Docket api() {
		return new Docket(DocumentationType.SWAGGER_2)
				.apiInfo(apiInfo())
				.securityContexts(Arrays.asList(securityContext()))
				.securitySchemes(Arrays.asList(apiKey()))
				.select()
				.apis(RequestHandlerSelectors.any())
				.paths(PathSelectors.any())
				.build();
	}


	private ApiInfo apiInfo() {
		return new ApiInfo(
				"DONATE BLOOD REST API",
				"When you want to authorize you must type Bearer and then JWT who " +
						"was generated by Welcome Controler method /authenticate.",
				"1.0",
				"Terms of service",
				new Contact("Aleksandar Rujevic", "https://github.com/Ruja159/Demo", "ruja_prijedor@hotmail.com"),
				"License of API",
				"API license URL",
				Collections.emptyList());
	}

	@Bean
	public WebMvcConfigurer corsConfigurer(){
		return new WebMvcConfigurer() {
			@Override
			public void addCorsMappings(CorsRegistry registry) {
				registry.addMapping("/*").allowedHeaders("*").allowedOrigins("*").allowedMethods("*").allowCredentials(false);
			}
		};
	}
	@Autowired
	private UserService userService;
	private void seedUsersTable() {
		List<User> u = userService.getUsers();
		if(u == null || u.size() <= 0) {
			User user = new User();
			user.setName("Spring Demo");
			user.setLastName("admin");
			user.setEmail("test@test.com");
			user.setPassword("pass");
			user.setUserName("demo");
			userService.addUser(user);

			User user1 = new User();
			user1.setName("Spring Demo 2");
			user1.setLastName("admin");
			user1.setEmail("test@test.com");
			user1.setPassword("pass");
			user1.setUserName("demo1");
			userService.addUser(user1);

			User user2 = new User();
			user2.setName("Spring Demo 3");
			user2.setLastName("admin");
			user2.setEmail("test@test.com");
			user2.setPassword("pass");
			user2.setUserName("demo2");
			userService.addUser(user2);

			User user3 = new User();
			user3.setName("Spring Demo 4");
			user3.setLastName("admin");
			user3.setEmail("test@test.com");
			user3.setPassword("pass");
			user3.setUserName("demo3");
			userService.addUser(user3);

			User user4 = new User();
			user4.setName("Spring Demo 5");
			user4.setLastName("admin");
			user4.setEmail("test@test.com");
			user4.setPassword("pass");
			user4.setUserName("demo4");
			userService.addUser(user4);

			User user5 = new User();
			user5.setName("Spring Demo 5");
			user5.setLastName("admin");
			user5.setEmail("test@test.com");
			user5.setPassword("pass");
			user5.setUserName("demo4");
			userService.addUser(user5);
		}
	}

	@Autowired
	private BloodTypeService bloodTypeService;
	private void seedBloodTypeTable() {
		List<BloodType> u = bloodTypeService.getBloodTypes();
		if(u == null || u.size() <= 0) {
			BloodType bloodTypeop = new BloodType();
			bloodTypeop.setName("0+");
			bloodTypeService.addBloodType(bloodTypeop);

			BloodType bloodTypeon = new BloodType();
			bloodTypeon.setName("0-");
			bloodTypeService.addBloodType(bloodTypeon);

			BloodType bloodTypean = new BloodType();
			bloodTypean.setName("A-");
			bloodTypeService.addBloodType(bloodTypean);

			BloodType bloodTypeap = new BloodType();
			bloodTypeap.setName("A+");
			bloodTypeService.addBloodType(bloodTypeap);

			BloodType bloodTypebp = new BloodType();
			bloodTypebp.setName("B+");
			bloodTypeService.addBloodType(bloodTypebp);

			BloodType bloodTypebn = new BloodType();
			bloodTypebn.setName("B-");
			bloodTypeService.addBloodType(bloodTypebn);

			BloodType bloodTypeabn = new BloodType();
			bloodTypeabn.setName("AB-");
			bloodTypeService.addBloodType(bloodTypeabn);

			BloodType bloodTypeabp = new BloodType();
			bloodTypeabp.setName("AB+");
			bloodTypeService.addBloodType(bloodTypeabp);

		}
	}
	@EventListener
	public void seed(ContextRefreshedEvent event) {
		seedBloodTypeTable();
		seedUsersTable();
	}


	public static void main(String[] args) {
		SpringApplication.run(DonatebloodApplication.class, args);
	}

}
